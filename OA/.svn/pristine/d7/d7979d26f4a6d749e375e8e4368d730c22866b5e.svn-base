package cn.tempus.myworkflow;

import java.util.List;

import org.activiti.engine.ActivitiException;
import org.activiti.engine.impl.RepositoryServiceImpl;
import org.activiti.engine.impl.cmd.NeedsActiveTaskCmd;
import org.activiti.engine.impl.context.Context;
import org.activiti.engine.impl.interceptor.CommandContext;
import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
import org.activiti.engine.impl.persistence.entity.TaskEntity;
import org.activiti.engine.impl.pvm.process.ActivityImpl;
import org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl;
import org.activiti.engine.impl.pvm.runtime.AtomicOperation;

/** 
* @author 吴中贤 wing4123@163.com
* @date 2017年7月19日
* @Description: 驳回
*  
*/
public class TurnDown3  extends NeedsActiveTaskCmd<Void>{

	private static final long serialVersionUID = 1L;
    
    public TurnDown3(String _taskId) {
        super(_taskId);
    }
    
    @Override
    protected Void execute(CommandContext commandContext, TaskEntity task) {
    	
        ExecutionEntity execution = task.getExecution();
    	
    	ExecutionEntity procIns = task.getProcessInstance();
    	//获取服务       
    	RepositoryServiceImpl repositoryService =  (RepositoryServiceImpl)execution.getEngineServices().getRepositoryService();
    	//获取流程定义的所有节点
    	ProcessDefinitionImpl processDefinitionImpl =  (ProcessDefinitionImpl)repositoryService.getProcessDefinition(procIns.getProcessDefinitionId());
    	//获取需要提交的节点
    	ActivityImpl toActivityImpl = processDefinitionImpl.findActivity("turndown");
    	
    	if(toActivityImpl == null ){
    		throw new ActivitiException("turndown Activity is null!");
    	}else{
    		procIns.setVariable("turndowntaskid", task.getId());
    		
    		//删除根execution的所有task
    		List<TaskEntity> tasks = procIns.getTasks();
    		for(TaskEntity taskentity:tasks){
    			Context.getCommandContext().getTaskEntityManager().deleteTask(taskentity, TaskEntity.DELETE_REASON_COMPLETED, false);
    		}
    		//删除所有excution的所有task
    		if(procIns.getExecutions().size()>0){
    			deletetask(procIns,task.getId());
    		}
    		
    		// 跳转至驳回节点
    		procIns.setActivity(toActivityImpl);
    		// 激活execution
    		procIns.setActive(true);
    		procIns.performOperation(AtomicOperation.ACTIVITY_START);
    		
    		procIns.removeVariable("end");
    		procIns.removeVariable("approvals");
    		
    	}
        return null;
    }
    
    public void deletetask(ExecutionEntity processinstance,String currenttaskid){
    	List<ExecutionEntity> executions = processinstance.getExecutions();
    	while(executions.size()>0){
    		ExecutionEntity executionentity = executions.get(0);
			List<TaskEntity> tasks2 = executionentity.getTasks();
    		for(TaskEntity taskentity:tasks2){
    			Context.getCommandContext().getTaskEntityManager().deleteTask(taskentity, TaskEntity.DELETE_REASON_COMPLETED, !taskentity.getId().equals(currenttaskid));
    		}
			
			if(executionentity.getExecutions().size()>0){
				deletetask(executionentity,currenttaskid);
			}
			
			Context.getCommandContext().getHistoryManager().recordActivityEnd(executionentity);
			Context.getCommandContext().getExecutionEntityManager().deleteProcessInstance(executionentity.getId(),"trun down",false);
		}
    }
    

}
